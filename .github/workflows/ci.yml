name: CI .NET Core


on:
  push:
      branches:
        - develop  
        - release/*
        - feature/*
        - fix/*
      paths-ignore:
      - '**/README.md'
      - '**/LICENSE'
  workflow_dispatch: #to test
     


jobs:
  build:
    env:
        BUILD_CONFIG: Release
        PROJECT_NAME: Magic.AutoMapper
        DI_PROJECT_NAME_POSTFIX: Extensions.Microsoft.DependencyInjection


    name: Build Start
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet: ['5.0.x'] #['3.1.x','5.0.101' ] #<-- conflict with global.json

    steps:
    - name: Trace Environment
      run: |
        echo "Log level: ${{ github.event.inputs.logLevel }}"
        echo "Tags: ${{ github.event.inputs.tags }}" 
        
    - name: Set env. aux vars
      run: |
        echo "SOLUTION_NAME=${PROJECT_NAME}.sln">> $GITHUB_ENV
        echo "TEST_PROJECT_PATH=tests/${PROJECT_NAME}.UnitTest/${PROJECT_NAME}.UnitTest.csproj" >> $GITHUB_ENV
        echo "DI_TEST_PROJECT_PATH=tests/${PROJECT_NAME}.${DI_PROJECT_NAME_POSTFIX}.UnitTest/${PROJECT_NAME}.UnitTest.csproj" >> $GITHUB_ENV
        echo "PROJECT_PATH=src/${PROJECT_NAME}/${PROJECT_NAME}.csproj" >> $GITHUB_ENV
        echo "DI_PROJECT_PATH=src/${PROJECT_NAME}/${PROJECT_NAME}.${DI_PROJECT_NAME_POSTFIX}.csproj" >> $GITHUB_ENV
 

    - uses: actions/checkout@v2

    - name: Setup .NET Core 5.0.101 # ${{ matrix.dotnet }}
      uses: actions/setup-dotnet@v1.7.2      
      with:
        dotnet-version: 5.0.101 # ${{ matrix.dotnet }}

    - name: Install dependencies                
      run: dotnet restore $SOLUTION_NAME

    - name: Test - [UnitTest]
      run: |
        dotnet test $TEST_PROJECT_PATH --no-restore --verbosity normal
        dotnet test $DI_TEST_PROJECT_PATH --no-restore --verbosity normal

    - name: Build - [$PROJECT_PATH]
      run:  dotnet build $PROJECT_PATH --configuration $BUILD_CONFIG --no-restore 
    
    - name: Build - [$DI_PROJECT_PATH]
      run:  dotnet build $DI_PROJECT_PATH --configuration $BUILD_CONFIG --no-restore 

    - name: dotnet pack [$PROJECT_NAME] & [$DI_PROJECT_PATH]
      run: |
        dotnet pack $PROJECT_PATH -c $BUILD_CONFIG --include-symbols -p:SymbolPackageFormat=snupkg -o ./artifacts
        dotnet pack $DI_PROJECT_PATH -c $BUILD_CONFIG --include-symbols -p:SymbolPackageFormat=snupkg -o ./artifacts
